name: Load Config Action

description: Reads a YAML config file and outputs its contents, including secrets from AWS Secrets Manager.

inputs:
  config_file:
    description: 'Path to the YAML configuration file'
    required: true

outputs:
  github_output:
    description: 'The output to be used by subsequent steps'

runs:
  using: 'composite'
  steps:
    - name: Install dependencies
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/local/bin/yq
        sudo chmod +x /usr/local/bin/yq
        yq --version
      shell: bash


    - name: Recursively flatten YAML and set outputs
      id: read_yaml
      shell: bash
      run: |
        CONFIG_FILE="${{ inputs.config_file }}"

        flatten() {
          local prefix=$1
          local path=$2
          local keys=$(yq e "$path | keys" "$CONFIG_FILE" | sed 's/- //g')

          for key in $keys; do
            local full_key="${prefix}${key}"
            local sub_path="${path}.${key}"
            local type=$(yq e "type($sub_path)" "$CONFIG_FILE")

            if [ "$type" = "!!map" ]; then
              flatten "${full_key}__" "$sub_path"
            else
              local val=$(yq e "$sub_path" "$CONFIG_FILE")
              echo "${full_key}=${val}" >> "$GITHUB_OUTPUT"
            fi
          done
        }

        flatten "" "."

    # - name: Read YAML file and set outputs for each field
    #   id: read_yaml
    #   run: |
    #     CONFIG_FILE="${{ inputs.config_file }}"

    #     # keysをJSON形式で取得してjqで配列展開
    #     keys=$(yq e -o=json 'keys' "$CONFIG_FILE")

    #     for key in $(echo "$keys" | jq -r '.[]'); do
    #       value=$(yq e ".$key" "$CONFIG_FILE")
          
    #       # JSONか判定するためにvalueをJSONで取得
    #       value_json=$(yq e -o=json ".$key" "$CONFIG_FILE")

    #       if [[ $(echo "$value_json" | jq 'type') == '"object"' ]]; then
    #         subkeys=$(echo "$value_json" | jq -r 'keys | .[]')
    #         for subkey in $subkeys; do
    #           subvalue=$(echo "$value_json" | jq -r ".$subkey")
    #           output_name="${key}_${subkey}"
    #           echo "${output_name}=${subvalue}" >> $GITHUB_OUTPUT
    #         done
    #         echo "${key}=$(echo "$value_json" | jq -c '.')" >> $GITHUB_OUTPUT
    #       else
    #         echo "${key}=${value}" >> $GITHUB_OUTPUT
    #       fi
    #     done
    #   shell: bash

    - name: Show Output
      run: |
        # GitHub Actionsの出力を表示
        echo "Outputs:"
        echo "dynamoDB: ${{ steps.read_yaml.outputs.dynamoDB }}"
        echo "test1_user: ${{ steps.read_yaml.outputs.test1_user }}"  # アンダースコア形式で表示
        echo "test1_password: ${{ steps.read_yaml.outputs.test1_password }}"  # アンダースコア形式で表示
        echo "test1: ${{ steps.read_yaml.outputs.test1 }}"  # test1 オブジェクト全体を表示
        echo "test2_user: ${{ steps.read_yaml.outputs.test2_user }}"  # アンダースコア形式で表示
        echo "test2_password: ${{ steps.read_yaml.outputs.test2_password }}"  # アンダースコア形式で表示
      shell: bash